version: "3"

output: prefixed

env:
  REACT_APP_BUILD_TIME: $(date +"%T")

tasks:
  default:
    cmds:
      - task: scrape
      - task: serve

  serve:
    desc: "Serve UI and server"
    deps: [ serve:backend, serve:frontend ]
    summary: |
      Serve the UI and server

      Runs the backend python application
      and serve the frontend react client.
    cmds:
      - echo "Serving application"

  serve:backend:
    desc: "Serve backend Python app"
    dir: backend
    preconditions:
      - sh: "[ -f requirements.txt ]"
        msg: "Missing backend/requirements.txt"
      - sh: "[ -d venv ]"
        msg: "Missing backend/venv"
    cmds:
      - source venv/bin/activate
      - pip3 install -r requirements.txt
      - task: db:migrate
      - task: db:populate
      - export FLASK_APP=backend.py
      - flask run

  serve:frontend:
    desc: "Serve React UI"
    dir: frontend/client
    preconditions:
      - sh: "[ -f package.json ]"
        msg: "Missing frontend/client/package.json"
    cmds:
      - echo "build_time" $REACT_APP_BUILD_TIME
      - yarn
      - yarn start

  scrape:
    desc: "Gather new jeopardy data"
    summary: |
      Gather all new jeopardy data

      Cleans out all of the old data and
      runs a new scraping session to get new
      questions.
    dir: scraper
    deps: [ refresh ]
    cmds:
      - scrapy crawl games
      - task: scrape:copy

  scrape:copy:
    cmds:
      - cp data/dump.json backend/data/dump.json

  refresh:
    desc: "Clean out the project"
    summary: |
      Removes old data from scraping and
      clears all caches.
    cmds:
      - rm -rf scraper/scraper/__pycache__/
      - rm -rf backend/__pycache__/

  db:populate:
    desc: "Load data from data/dump.json into the db"
    summary: |
      This task uses the sources/generates pattern so we 
      don't try to populate the db if the dump.json file hasn't changed.
      This really only needs to be run once after the db is created.
    dir: backend
    cmds:
      - python3 populate_db.py
    sources:
      - ../data/dump.json
    generates:
      - jeppy.db

  db:migrate:
    desc: "Create and apply a new migration to the db"
    dir: backend
    summary: |
      This task should be run anytime a change to the db schema
      is made

      If this task fails you may need to run the migrate 
      command first and review the generate migration script
      in migrations/versions before applying it to the db.
    cmds:
      - cmd: test -f jeppy.db && flask db migrate
        ignore_error: true
      - flask db upgrade
